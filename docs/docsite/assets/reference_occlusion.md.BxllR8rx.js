import{_ as e,c as i,o as s,ae as a}from"./chunks/framework.C5RTWoTo.js";const k=JSON.parse('{"title":"Occlusion","description":"","frontmatter":{"layout":"doc","title":"Occlusion","prev":{"text":"Coloring","link":"/reference/coloring"},"next":{"text":"Point-Light Display","link":"/reference/pld"}},"headers":[],"relativePath":"reference/occlusion.md","filePath":"reference/occlusion.md"}'),l={name:"reference/occlusion.md"};function n(d,t,o,r,h,c){return s(),i("div",null,t[0]||(t[0]=[a(`<h1 id="occlusion-module-reference" tabindex="-1">Occlusion Module Reference <a class="header-anchor" href="#occlusion-module-reference" aria-label="Permalink to &quot;Occlusion Module Reference&quot;">​</a></h1><h2 id="facial_masking" tabindex="-1">Facial Masking <a class="header-anchor" href="#facial_masking" aria-label="Permalink to &quot;Facial Masking {#facial_masking}&quot;">​</a></h2><p><code>mask_face_region</code> will apply the specified <code>mask_type</code> to all files contained in <code>input_dir</code>, outputting masked images and videos to {<code>output_dir</code>}/Masked.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mask_face_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mask_type:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FACE_OVAL_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, background_color: tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>mask_type</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">An integer flag specifying the type of masking operation being performed. One of <code>FACE_OVAL</code>, <code>FACE_OVAL_TIGHT</code> OR <code>FACE_SKIN_ISOLATION</code>.</td></tr><tr><td style="text-align:left;"><code>background_color</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">A BGR color code specifying the output files background color.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="facial_masking_error" tabindex="-1">Error Handling <a class="header-anchor" href="#facial_masking_error" aria-label="Permalink to &quot;Error Handling {#facial_masking_error}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table><h2 id="facial_occlusion" tabindex="-1">Facial Occlusion <a class="header-anchor" href="#facial_occlusion" aria-label="Permalink to &quot;Facial Occlusion {#facial_occlusion}&quot;">​</a></h2><p><code>occlude_face_region</code> takes the landmark regions specified within <code>landmarks_to_occlude</code>, and occludes them with the specified method for each image or video file present within the input directory provided in <code>input_dir</code>. Processed videos will be written to {<code>output_dir</code>}/Occluded.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> occlude_face_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, landmarks_to_occlude:list[list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BOTH_EYES_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    occlusion_fill:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OCCLUSION_FILL_BLACK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>landmarks_to_occlude</code></td><td style="text-align:left;"><code>list[list[tuple]]</code></td><td style="text-align:left;">One or more lists of facial landmark paths. These paths can be manually created using <code>pyfame.utils.utils.create_path()</code>, or you may use any of the library provided predefined landmark paths.</td></tr><tr><td style="text-align:left;"><code>occlusion_fill</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">An integer flag indicating the occlusion method to be used. One of <code>OCCLUSION_FILL_BLACK</code>, <code>OCCLUSION_FILL_MEAN</code> or <code>OCCLUSION_FILL_BAR</code>.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="facial_occlusion_error" tabindex="-1">Error Handling <a class="header-anchor" href="#facial_occlusion_error" aria-label="Permalink to &quot;Error Handling {#facial_occlusion_error}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table><h2 id="facial_blurring" tabindex="-1">Facial Blurring <a class="header-anchor" href="#facial_blurring" aria-label="Permalink to &quot;Facial Blurring {#facial_blurring}&quot;">​</a></h2><p><code>blur_face_region</code> takes the provided <code>blur_method</code> (one of gaussian, average or median), and applies it to each image or video file contained in <code>input_dir</code>. The processed files are written out to {<code>output_dir</code>}/Blurred.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> blur_face_region</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, blur_method:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;gaussian&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k_size:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>blur_method</code></td><td style="text-align:left;"><code>str</code> or <code>int</code></td><td style="text-align:left;">Either a string literal or an integer specifier of the blur method to be applied to the input files (one of &quot;gaussian&quot;, &quot;average&quot; or &quot;median&quot;).</td></tr><tr><td style="text-align:left;"><code>k_size</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">Specifies the size of the square kernel used in the blurring operations.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="facial_blurring_error" tabindex="-1">Error Handling <a class="header-anchor" href="#facial_blurring_error" aria-label="Permalink to &quot;Error Handling {#facial_blurring_error}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table><h2 id="facial_noise" tabindex="-1">Dynamic Noise Application <a class="header-anchor" href="#facial_noise" aria-label="Permalink to &quot;Dynamic Noise Application {#facial_noise}&quot;">​</a></h2><p><code>apply_noise</code> provides the ability to apply various types of image noise (pixelation, gaussian or salt and pepper) to dynamic facial regions using built-in facial region masks. <code>apply_noise</code> offers a high degree of noise customization, with parameters <code>noise_prob</code>, <code>mean</code>, <code>standard_dev</code> and <code>rand_seed</code> allowing for precise control over the manipulations and their reproducibility. Processed files are written out to {<code>output_dir</code>}/Noise_Added.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply_noise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, noise_method:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pixelate&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pixel_size:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    noise_prob:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rand_seed:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mean:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, standard_dev:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mask_type:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> FACE_OVAL_MASK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>noise_method</code></td><td style="text-align:left;"><code>int</code> or <code>str</code></td><td style="text-align:left;">Either a string literal or an integer specifier specifying the noise method to be applied (one of &quot;pixelate&quot;, &quot;salt and pepper&quot; or &quot;gaussian&quot;).</td></tr><tr><td style="text-align:left;"><code>pixel_size</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">Specifies the pixel size to be used with noise_method &quot;pixelate&quot;.</td></tr><tr><td style="text-align:left;"><code>noise_prob</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A float in the range [0,1] that specifies the probability of noise being applied to a random pixel in the frame.</td></tr><tr><td style="text-align:left;"><code>rand_seed</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">An integer to seed the random number generator.</td></tr><tr><td style="text-align:left;"><code>mean</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">The mean of the gaussian distribution used with noise_method &quot;gaussian&quot;.</td></tr><tr><td style="text-align:left;"><code>standard_dev</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">The standard deviation of the gaussian distribution used with noise_method &quot;gaussian&quot;.</td></tr><tr><td style="text-align:left;"><code>mask_type</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">An integer flag specifying the type of masking operation being performed.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="facial_noise_error" tabindex="-1">Error Handling <a class="header-anchor" href="#facial_noise_error" aria-label="Permalink to &quot;Error Handling {#facial_noise_error}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table>`,25)]))}const g=e(l,[["render",n]]);export{k as __pageData,g as default};
