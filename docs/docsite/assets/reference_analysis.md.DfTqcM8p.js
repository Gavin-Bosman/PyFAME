import{_ as e,c as i,o as s,ae as a}from"./chunks/framework.C5RTWoTo.js";const k=JSON.parse('{"title":"Analysis","description":"","frontmatter":{"layout":"doc","title":"Analysis","prev":{"text":"Overview","link":"/reference/overview"},"next":{"text":"Coloring","link":"/reference/coloring"}},"headers":[],"relativePath":"reference/analysis.md","filePath":"reference/analysis.md"}'),l={name:"reference/analysis.md"};function n(d,t,o,r,h,p){return s(),i("div",null,t[0]||(t[0]=[a(`<h1 id="analysis-submodule-reference" tabindex="-1">Analysis Submodule Reference <a class="header-anchor" href="#analysis-submodule-reference" aria-label="Permalink to &quot;Analysis Submodule Reference&quot;">​</a></h1><h2 id="optic_flow" tabindex="-1">Optical Flow <a class="header-anchor" href="#optic_flow" aria-label="Permalink to &quot;Optical Flow {#optic_flow}&quot;">​</a></h2><p><code>get_optical_flow</code> provides access to both sparse (Lucas-Kanadae) and dense (Farneback) optical flow. The type of optical flow operation performed is specified by input parameter <code>optical_flow_type</code>. For each file in <code>input_dir</code>, <code>get_optical_flow</code> applies the specified optical flow operation and outputs two files to <code>output_dir</code>. These two files are an image/video representation of the optical flow, and a CSV file containing the optical flow vector&#39;s magnitudes and direction. The input parameter <code>csv_sample_freq</code> determines how often the optical flow vectors should be sampled and recorded in the output CSV file.</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_optical_flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, optical_flow_type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SPARSE_OPTICAL_FLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    landmarks_to_track:list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_corners:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, corner_quality_lvl:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_corner_distance:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, block_size:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, win_size:tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    max_pyr_lvl:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pyr_scale:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, max_lk_iter:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lk_accuracy_thresh:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.03</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, poly_sigma:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, point_color:tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), point_radius:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vector_color:tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, csv_sample_freq:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>optical_flow_type</code></td><td style="text-align:left;"><code>int</code> or <code>str</code></td><td style="text-align:left;">An integer flag or string literal specifying the type of optical flow operation to perform (one of SPARSE_OPTICAL_FLOW/DENSE_OPTICAL_FLOW, or &quot;sparse&quot;/&quot;dense&quot;).</td></tr><tr><td style="text-align:left;"><code>landmarks_to_track</code></td><td style="text-align:left;"><code>list[int]</code> or <code>None</code></td><td style="text-align:left;">Specific landmark points of interest to pass to the Shi-Tomasi good corners algorithm. These integers must align with the mediapipe face landmarker landmarks, which range from 0-477.</td></tr><tr><td style="text-align:left;"><code>max_corners</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">A configuration parameter specifying the maximum ammount of corners for the Shi-Tomasi corners algorithm to detect.</td></tr><tr><td style="text-align:left;"><code>corner_quality_lvl</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A float in the range [0,1] that determines the minimum quality of accepted corners found using the Shi-Tomasi corners algorithm.</td></tr><tr><td style="text-align:left;"><code>min_corner_distance</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The minimum euclidean distance between accepted corners found using the Shi-Tomasi corners algorithm.</td></tr><tr><td style="text-align:left;"><code>block_size</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The size of the search window used in the Shi-Tomasi corners algorithm (sparse optical flow), or the size of the pixel neighborhood used to find the polynomial expansion of each pixel (dense optical flow). <code>block_size</code> is commonly set equal to 5 or 7.</td></tr><tr><td style="text-align:left;"><code>win_size</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">The size of the search window (in pixels) used at each pyramid level with sparse optical flow.</td></tr><tr><td style="text-align:left;"><code>max_pyr_level</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The maximum number of pyramid levels used in sparse optical flow. As you increase this parameter larger motions can be detected but consequently computation time increases.</td></tr><tr><td style="text-align:left;"><code>pyr_scale</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A float in the range [0,1] representing the downscale of the image at each pyramid level in dense optical flow. For example, with a pyr_scale of 0.5, at each pyramid level the image will be half the size of the previous image.</td></tr><tr><td style="text-align:left;"><code>max_lk_iter</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">One of the termination criteria for sparse optical flow. Represents the maximum number of iterations over each frame the algorithm will make before terminating.</td></tr><tr><td style="text-align:left;"><code>lk_accuracy_thresh</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">One of the termination criteria for sparse optical flow. A float in the range [0,1] representing the optimal termination accuracy for the algorithm.</td></tr><tr><td style="text-align:left;"><code>poly_sigma</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">The standard deviation of the Gaussian distribution used in the polynomial expansion of each pixel for dense optical flow. Typically with <code>block_size</code> of 5 or 7, good values for <code>poly_sigma</code> are 1.2 and 1.5, respectively.</td></tr><tr><td style="text-align:left;"><code>point_color</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">A BGR color code that specifies the color of the points displayed in the sparse optical flow output image.</td></tr><tr><td style="text-align:left;"><code>point_radius</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The radius of the points displayed in the sparse optical flow output image.</td></tr><tr><td style="text-align:left;"><code>vector_color</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">A BGR color code that specifies the color of the vectors drawn in the sparse optical flow output image.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>csv_sample_freq</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The time duration (in msec) specifying the sampling period of the optical flow vectors magnitudes and directions.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table><h2 id="color_means" tabindex="-1">Facial Color Means <a class="header-anchor" href="#color_means" aria-label="Permalink to &quot;Facial Color Means {#color_means}&quot;">​</a></h2><p><code>extract_face_color_means</code> will take each input image/video, and extract the global and local color channel values in the specified color space (determined by input parameter <code>color_space</code>). The color channel values of the full face, cheeks, nose, and chin, are recorded and written out in a CSV file. <code>extract_face_color_means</code> will create a new subdirectory under <code>output_dir</code> called <code>Color_Channel_Means/</code>.</p><div class="language-Python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> extract_face_color_means</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, color_space: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COLOR_SPACE_RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>color_space</code></td><td style="text-align:left;"><code>int</code> or <code>str</code></td><td style="text-align:left;">An integer specifier or string literal specifying the color space to operate in (One of COLOR_SPACE_RGB, COLOR_SPACE_HSV, COLOR_SPACE_GRAYSCALE, or &quot;rgb&quot;, &quot;hsv&quot;, &quot;grayscale&quot;).</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="error-handling-1" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling-1" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table>`,13)]))}const g=e(l,[["render",n]]);export{k as __pageData,g as default};
