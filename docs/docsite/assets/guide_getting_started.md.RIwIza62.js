import{_ as s,c as a,o as t,ae as e}from"./chunks/framework.C5RTWoTo.js";const n="/PyFAME/Actor_08.png",l="/PyFAME/Actor_08_sat_shifted_occluded.png",y=JSON.parse('{"title":"Getting Started","description":"","frontmatter":{"layout":"doc","title":"Getting Started","prev":false,"next":{"title":"Examples","link":"/guide/examples"}},"headers":[],"relativePath":"guide/getting_started.md","filePath":"guide/getting_started.md"}'),p={name:"guide/getting_started.md"};function h(r,i,o,d,k,c){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="getting-started" tabindex="-1">Getting Started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting Started&quot;">​</a></h1><h2 id="install" tabindex="-1">Installing Pyfame <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Installing Pyfame {#install}&quot;">​</a></h2><p>PyFAME requires Python &gt;= 3.9 to be installed on your system. You can find information on installing and setting up Python <a href="https://wiki.python.org/moin/BeginnersGuide/Download" target="_blank" rel="noreferrer">here</a>. Once you have Python installed, PyFAME can be installed with pip via PyPi:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pyfame</span></span></code></pre></div><h2 id="quick_example" tabindex="-1">Quick Example <a class="header-anchor" href="#quick_example" aria-label="Permalink to &quot;Quick Example {#quick_example}&quot;">​</a></h2><p>PyFAME includes a large library of classical facial psychology manipulations, such as masking, occlusion, landmark-shuffling, and color manipulation. Additionally, almost all of these manipulations can be layered. Below is a quick example on how you could desaturate, then occlude half of the face in the provided video file.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># All of PyFAME&#39;s core functions are available via a top-level import</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pyfame </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Define the input and output directory paths</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./my/input/path/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./my/output/path/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Applying a facial desaturation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pf.face_saturation_shift(input_directory, output_directory, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shift_magnitude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Every PyFAME operation has a unique output_directory name, for saturation it is Sat_Shifted/.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># In order to layer the manipulations, we pass the previous output directory as the input directory </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># to the next manipulation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">input_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output_directory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Sat_Shifted/&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Applying a hemi-face occlusion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pf.occlude_face_region(output_directory, output_directory, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">landmarks_to_occlude</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HEMI_FACE_LEFT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h3 id="before" tabindex="-1">Before: <a class="header-anchor" href="#before" aria-label="Permalink to &quot;Before:&quot;">​</a></h3><div style="display:flex;align-items:center;justify-content:center;"><img src="`+n+'" width="400px"></div><h3 id="after" tabindex="-1">After: <a class="header-anchor" href="#after" aria-label="Permalink to &quot;After:&quot;">​</a></h3><div style="display:flex;align-items:center;justify-content:center;"><img src="'+l+'" width="400px"></div>',11)]))}const g=s(p,[["render",h]]);export{y as __pageData,g as default};
