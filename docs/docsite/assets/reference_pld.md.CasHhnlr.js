import{_ as e,c as i,o as s,ae as a}from"./chunks/framework.C5RTWoTo.js";const k=JSON.parse('{"title":"Point Light Display","description":"","frontmatter":{"layout":"doc","title":"Point Light Display","prev":{"text":"Occlusion","link":"/reference/occlusion"},"next":{"text":"Scrambling","link":"/reference/scrambling"}},"headers":[],"relativePath":"reference/pld.md","filePath":"reference/pld.md"}'),l={name:"reference/pld.md"};function n(d,t,o,r,h,p){return s(),i("div",null,t[0]||(t[0]=[a(`<h1 id="point-light-display-module-reference" tabindex="-1">Point-Light Display Module Reference <a class="header-anchor" href="#point-light-display-module-reference" aria-label="Permalink to &quot;Point-Light Display Module Reference&quot;">​</a></h1><h2 id="pld" tabindex="-1">Generating Point-Light Displays <a class="header-anchor" href="#pld" aria-label="Permalink to &quot;Generating Point-Light Displays {#pld}&quot;">​</a></h2><p>The <code>generate_point_light_display()</code> function provides users the ability to generate a facial point-light display with only an input video. Facial landmark regions of interest are passed in as paths (predefined, or created using <code>pyfame.utils.create_path()</code>). Furthermore, point density and color can be easily manipulated via input parameters. <code>generate_point_light_display()</code> also provides the ability to track and display point displacement history, which can be visualized in two methods. <code>SHOW_HISTORY_ORIGIN</code> visualizes the displacement vectors from the current point positions to their original positions, while <code>SHOW_HISTORY_RELATIVE</code> visualizes the displacement vectors as their relative path of travel within some time window defined by parameter <code>history_window_msec</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generate_point_light_display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, output_dir:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, landmark_regions:list[list[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FACE_OVAL_PATH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], point_density:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    show_history:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, history_mode:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SHOW_HISTORY_ORIGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, history_window_msec:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, history_color:tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), point_color:tuple[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), with_sub_dirs:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_detection_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, min_tracking_confidence:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">float</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div><table tabindex="0"><thead><tr><th style="text-align:left;">Parameter</th><th style="text-align:left;">Type</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><code>input_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory containing files to process.</td></tr><tr><td style="text-align:left;"><code>output_dir</code></td><td style="text-align:left;"><code>str</code></td><td style="text-align:left;">A path string to the directory where processed files will be output.</td></tr><tr><td style="text-align:left;"><code>landmark_regions</code></td><td style="text-align:left;"><code>list[list[tuple]]</code></td><td style="text-align:left;">A list of one or more facial landmark paths. These can be predefined or manually created using <code>pyfame.utils.create_path()</code>, which takes a list of landmark indicies and outputs a path.</td></tr><tr><td style="text-align:left;"><code>point_density</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A float in the range [0,1] that controls the spatial density of the points in the output point-light display.</td></tr><tr><td style="text-align:left;"><code>show_history</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating whether or not to display the history vectors.</td></tr><tr><td style="text-align:left;"><code>history_mode</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">An integer flag specifying the method of visualizing the history vectors; one of <code>pyfame.SHOW_HISTORY_ORIGIN</code> or <code>pyfame.SHOW_HISTORY_RELATIVE</code></td></tr><tr><td style="text-align:left;"><code>history_window_msec</code></td><td style="text-align:left;"><code>int</code></td><td style="text-align:left;">The time duration in milliseconds that the relative history vectors will visualize.</td></tr><tr><td style="text-align:left;"><code>history_color</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">A BGR color code specifying the display color of the history vectors.</td></tr><tr><td style="text-align:left;"><code>point_color</code></td><td style="text-align:left;"><code>tuple[int]</code></td><td style="text-align:left;">A BGR color code specifying the display color of the points in the output point-light display.</td></tr><tr><td style="text-align:left;"><code>with_sub_dirs</code></td><td style="text-align:left;"><code>bool</code></td><td style="text-align:left;">A boolean flag indicating if the input directory contains sub-directories.</td></tr><tr><td style="text-align:left;"><code>min_detection_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr><tr><td style="text-align:left;"><code>min_tracking_confidence</code></td><td style="text-align:left;"><code>float</code></td><td style="text-align:left;">A confidence measure in the range [0,1], passed on to the MediaPipe FaceMesh model.</td></tr></tbody></table><h3 id="pld_error" tabindex="-1">Error Handling <a class="header-anchor" href="#pld_error" aria-label="Permalink to &quot;Error Handling {#pld_error}&quot;">​</a></h3><table tabindex="0"><thead><tr><th style="text-align:left;">Raises</th><th style="text-align:left;">Encountered Error</th></tr></thead><tbody><tr><td style="text-align:left;"><code>ValueError</code></td><td style="text-align:left;">Given unrecognized input parameter values.</td></tr><tr><td style="text-align:left;"><code>TypeError</code></td><td style="text-align:left;">Given invalid input parameter typings.</td></tr><tr><td style="text-align:left;"><code>OSError</code></td><td style="text-align:left;">Given an invalid path-string for either <code>input_dir</code> or <code>output_dir</code>.</td></tr><tr><td style="text-align:left;"><code>FileReadError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoCapture()</code> or calling <code>cv2.imRead()</code>.</td></tr><tr><td style="text-align:left;"><code>FileWriteError</code></td><td style="text-align:left;">If an error is encountered instantiating <code>cv2.VideoWriter()</code> or calling <code>cv2.imWrite()</code>.</td></tr><tr><td style="text-align:left;"><code>UnrecognizedExtensionError</code></td><td style="text-align:left;">If the function encounters an unrecognized image or video file extension.</td></tr><tr><td style="text-align:left;"><code>FaceNotFoundError</code></td><td style="text-align:left;">If the mediapipe FaceMesh model cannot identify a face in the input image or video.</td></tr></tbody></table>`,7)]))}const g=e(l,[["render",n]]);export{k as __pageData,g as default};
